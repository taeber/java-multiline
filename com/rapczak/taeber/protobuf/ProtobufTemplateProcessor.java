package com.rapczak.taeber.protobuf;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.Name;
import javax.lang.model.element.PackageElement;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.tools.Diagnostic.Kind;
import javax.tools.JavaFileObject;

@SupportedAnnotationTypes("com.rapczak.taeber.protobuf.ProtobufTemplate")
@SupportedSourceVersion(SourceVersion.RELEASE_11)
public final class ProtobufTemplateProcessor extends AbstractProcessor {

  @Override
  public boolean process(Set<? extends TypeElement> annotations,
                         RoundEnvironment env) {
    final var logger = processingEnv.getMessager();

    for (var element : env.getElementsAnnotatedWith(ProtobufTemplate.class)) {
      assert element.getKind() == ElementKind.METHOD;
      var method = (ExecutableElement)element;

      PackageElement pkg =
          processingEnv.getElementUtils().getPackageOf(element);
      Name name = element.getSimpleName();

      var result = method.getReturnType().toString();
      var params = method.getParameters();

      String comment = processingEnv.getElementUtils()
                           .getDocComment(element)
                           .trim()
                           .replace("\"", "\\\"")
                           .replace("\n", "\\n");
      String genClassName =
          element.getAnnotation(ProtobufTemplate.class).value();

      try {
        var outfile = processingEnv.getFiler().createSourceFile(String.format(
            "%s.%s", pkg.getQualifiedName().toString(), genClassName));
        write(outfile, pkg.getQualifiedName().toString(), genClassName,
              name.toString(), result, comment, params);
      } catch (IOException ex) {
        logger.printMessage(Kind.ERROR, ex.getMessage());
      }
    }

    return true;
  }

  private static void
  write(JavaFileObject outfile, String pkg, String className, String name,
        String result, String template, List<? extends VariableElement> params)
      throws IOException {
    try (var out = new PrintWriter(outfile.openWriter())) {
      var code = "// THIS FILE WAS GENERATED by ProtobufTemplateProcessor.\n"
                 + "package ${package};\n"
                 + "import com.google.protobuf.TextFormat;\n"
                 + "final class ${className} {\n"
                 + "  private static String msg = \"${msg}\";\n"
                 + "  public static ${result} format(${paramList}) {\n"
                 + "    var builder = ${result}.newBuilder();\n"
                 + "    String[] placeholders = {${placeholders}};\n"
                 + "    String[] replacements = {${replacements}};\n"
                 + "    var txt = msg;\n"

                 + "    for (var i = 0; i < placeholders.length; i++) {\n"
                 + "      txt = txt.replace(\"${\" + placeholders[i] + \"}\","
                 + "                        replacements[i]);\n"
                 + "    }\n"
                 + "    try {TextFormat.getParser().merge(txt, builder);}\n"
                 + "    catch (Exception e) {throw new RuntimeException(e);}\n"
                 + "    return builder.build();\n"
                 + "  }\n"
                 + "  private ${className}() {}\n"
                 + "}\n";
      String[] placeholders = {"package",      "className",   "result",
                               "msg",          "paramList",   "params",
                               "placeholders", "replacements"};
      String[] replacements = {pkg,
                               className,
                               result,
                               template,
                               parameterList(params),
                               parameterNames(params),
                               quotedParameterNames(params),
                               argumentsToString(params)};
      out.print(format(code, placeholders, replacements));
    }
  }

  public static String format(String text, String[] placeholders,
                              String[] replacements) {
    for (var i = 0; i < placeholders.length; i++) {
      text = text.replace("${" + placeholders[i] + "}", replacements[i]);
    }
    return text;
  }

  private static String
  parameterList(List<? extends VariableElement> elements) {
    var parts = elements.stream()
                    .map(v -> v.asType().toString() + " " + v.toString())
                    .collect(Collectors.toUnmodifiableList());
    return String.join(",", parts);
  }

  private static String
  parameterNames(List<? extends VariableElement> elements) {
    return elements.toString();
  }

  private static String
  quotedParameterNames(List<? extends VariableElement> elements) {
    var parts = elements.stream()
                    .map(v -> '"' + v.toString() + '"')
                    .collect(Collectors.toUnmodifiableList());
    return String.join(",", parts);
  }

  private static String
  argumentsToString(List<? extends VariableElement> elements) {
    var parts = elements.stream()
                    .map(v -> {
                      var name = v.toString();
                      var type = v.asType().toString();
                      if (type == "java.lang.String") {
                        return name;
                      }
                      if (!type.contains(".")) {
                        // Assume it's a primitive
                        return "String.valueOf(" + name + ")";
                      }
                      return name + ".toString()";
                    })
                    .collect(Collectors.toUnmodifiableList());
    return String.join(",", parts);
  }
}
